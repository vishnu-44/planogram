{"version":3,"sources":["Box.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["Box","x","y","selectedBoxes","setSelectedBoxes","color","useState","selectBox","setSelectBox","useEffect","length","className","style","background","onClick","Table","selections","map","selection","index","category","selectedBox","App","noOfRows","setNoOfRows","noOfColumns","setNoOfColumns","setColor","setCateogry","fixedSelection","setFixSelection","planogramName","setPlanogramName","planogram","setPlanogram","savePlanogram","name","rows","columns","i","console","log","requestOptions","method","headers","body","JSON","stringify","code","fetch","then","response","ok","catch","error","sendForm","boxes","j","push","getBoxes","action","encType","for","id","type","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d03c1d54.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nconst Box = ({x, y,  selectedBoxes, setSelectedBoxes, color}) => {\r\n\r\n    const [selectBox, setSelectBox] = useState(false)\r\n\r\n    const check = () => {\r\n        for (let i=0; i<selectedBoxes.length; i++) \r\n            if (selectedBoxes[i].x === x && selectedBoxes[i].y === y) return true  \r\n        \r\n        return false\r\n    }\r\n\r\n    const removeSelectedBox = () => {\r\n        let temp = selectedBoxes\r\n        for (let i=0; i<selectedBoxes.length; i++) \r\n            if (selectedBoxes[i].x === x && selectedBoxes[i].y === y) {\r\n                return temp.slice(0,i).concat(temp.slice(i+1, -1))\r\n            }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedBoxes.length === 0)\r\n            setSelectBox(false)\r\n\r\n    }, [selectedBoxes])\r\n\r\n    return (\r\n        <div className=\"box\" style={{background: (selectBox? color:'rgb(139, 139, 139)')}} onClick={() => {setSelectBox(!selectBox); setSelectedBoxes([...selectedBoxes, {x:x, y:y}])}}>\r\n            {x}, {y}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box\r\n","import React from 'react'\r\n\r\nconst Table = ({selections}) => {\r\n    return (\r\n        <div className=\"table-container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th> Category Name</th>\r\n                        <th> Category Color </th>\r\n                        <th> Row, Col Points </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        selections.map((selection, index) => \r\n                            <tr key={index}>\r\n                                <td> {selection.category} </td>\r\n                                <td> <div className=\"selected-box-color-container\" style={{background: selection.color}}></div> </td>\r\n                                <td> {selection.selectedBoxes.map(selectedBox => `(${selectedBox.x}, ${selectedBox.y}) `)} </td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import './App.css';\nimport Box from './Box'\nimport Table from './Table';\nimport { useState } from 'react'\n\nfunction App() {\n\n\tconst [noOfRows, setNoOfRows] = useState(1)\n\tconst [noOfColumns, setNoOfColumns] = useState(1)\n\tconst [color, setColor] = useState('#000')\n\tconst [category, setCateogry] = useState('')\n\tconst [selectedBoxes, setSelectedBoxes] = useState([])\n\tconst [fixedSelection, setFixSelection] = useState([])\n\tconst [planogramName, setPlanogramName] = useState('')\n\tconst [planogram, setPlanogram] = useState({})\n\t\n\n\tconst getBoxes = () => {\n\t\tvar boxes = []\n\n\t\tfor (let i=0; i<noOfRows; i++) {\n\t\t\tlet rows = []\n\n\t\t\tfor (let j=0; j<noOfColumns; j++) {\n\t\t\t\trows.push(<Box \n\t\t\t\t\tx={i} \n\t\t\t\t\ty={j} \n\t\t\t\t\tselectedBoxes={selectedBoxes} \n\t\t\t\t\tsetSelectedBoxes={setSelectedBoxes} \n\t\t\t\t\tcolor={color} \n\t\t\t\t\tkey={`${i}-${j}`}\n\t\t\t\t/>)\n\t\t\t}\n\t\t\tboxes.push(<div className=\"box-row-container\">{rows}</div>)\n\t\t}\n\n\t\treturn boxes\n\t}\n\n\tconst addSelection = () => {\n\t\tsetFixSelection([...fixedSelection, {\n\t\t\tcolor: color, \n\t\t\tcategory: category, \n\t\t\tselectedBoxes: selectedBoxes\n\t\t}])\n\n\t\tsetSelectedBoxes([])\n\t\tsetCateogry('')\n\t}\n\n\tconst sendForm = () => {\n\t\tconst requestOptions = {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: { \n                'Accept':'application/json',\n\t\t\t\t\"Content-Type\": \"application/json\" \n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\tcode: planogram,\n\t\t\t}),\n\t\t};\n\n\t\tfetch('http://127.0.0.1:8000/home', requestOptions)\n\t\t.then(response => {\n\t\t\tif(response.ok) {\n\t\t\t\tconsole.log('ok kul');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log('fuck off not found');\n\t\t\t}\n\t\t})\n\t\t.catch(error => console.log(error))\n\t}\n\n\tconst savePlanogram = () => {\n\t\tsetPlanogram({\n\t\t\tname: planogramName,\n\t\t\trows: noOfRows,\n\t\t\tcolumns: noOfColumns,\n\t\t\tplanogram: fixedSelection\n\t\t})\n\n\t\tfor (let i=0; i<10; i++)\n\t\tconsole.log(planogram);\n\n\t\tsendForm()\n\t}\n\n\t\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"left-container\">\n\t\t\t\t<h3> Planogram Boxes </h3>\n\n\t\t\t\t<div className=\"box-container\">\n\t\t\t\t\t{getBoxes()\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div className=\"right-container\">\n\t\t\t\t<h3> Planogram UI </h3>\n\n\t\t\t\t<form  action= \"{% url 'home'%}\" method='post' encType=\"multipart/form-data\">\n\t\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t\t<label for=\"rows\"> Enter Rows </label>\n\t\t\t\t\t\t<input id=\"rows\" type=\"text\" name=\"rows\" value={noOfRows} onChange={e => setNoOfRows(e.target.value)} />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t\t<label for=\"columns\"> Enter Columns </label>\n\t\t\t\t\t\t<input id=\"columns\" type=\"text\" name=\"columns\" value={noOfColumns} onChange={e=> setNoOfColumns(e.target.value)} />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t\t<label for=\"category\"> Name a category </label>\n\t\t\t\t\t\t<input id=\"category\" type=\"text\" name=\"category\" value={category} onChange={ e => setCateogry(e.target.value)} />\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t\t<label for=\"color\"> Box Color </label>\n\t\t\t\t\t\t<input id=\"color\" type=\"color\" name=\"color\"  value={color} onChange={e => setColor(e.target.value)}/>\n\t\t\t\t\t</div>\n\n\t\t\t\t</form>\n\n\t\t\t\t<input type=\"submit\" value=\"Fix Selection\" onClick={() => addSelection()} />\n\n\t\t\t\t{\n\t\t\t\t\tfixedSelection.length !== 0? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<form action=\"\" className=\"planogram-form\">\t\n\t\t\t\t\t\t\t\t<div className=\"input-container\">\n\t\t\t\t\t\t\t\t\t<label for=\"planogram\"> Enter Planogram Name </label>\n\t\t\t\t\t\t\t\t\t<input id=\"planogram\" type=\"text\" name=\"planogram\" value={planogramName} onChange={ e => setPlanogramName(e.target.value)} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Save Planogram\" onClick={() => savePlanogram()} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t): ''\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t\t{\n\t\t\t\tfixedSelection.length !== 0? <Table selections={fixedSelection} /> : ''\n\t\t\t}\t\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}